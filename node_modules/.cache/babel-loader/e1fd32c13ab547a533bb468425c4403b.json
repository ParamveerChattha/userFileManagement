{"ast":null,"code":"var _jsxFileName = \"/Volumes/diskA/workspace/react/autosuggestion-app/src/components/LibraryModal.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst LibraryModal = () => {\n  _s();\n\n  const [currentPage, setCurrentPage] = useState(1); // const [nextPage, setNetPage] = useState(2);\n  // const [previousPage, setPreviousPage] = useState();\n\n  function nextPage() {\n    if (currentPage + 1 < 3) {\n      setCurrentPage(currentPage + 1);\n    }\n  }\n\n  function previousPage() {\n    if (currentPage - 1 > 0) {\n      setCurrentPage(currentPage - 1);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \" My Wizard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(LibraryModal, \"6xAUoJ2motYJ38x4zeUWisA+X/4=\");\n\n_c = LibraryModal;\nexport default LibraryModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"LibraryModal\");","map":{"version":3,"sources":["/Volumes/diskA/workspace/react/autosuggestion-app/src/components/LibraryModal.js"],"names":["useState","LibraryModal","currentPage","setCurrentPage","nextPage","previousPage"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;;;;AAEA,MAAMC,YAAY,GAAG,MAAM;AAAA;;AACzB,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCH,QAAQ,CAAC,CAAD,CAA9C,CADyB,CAEzB;AACA;;AAEA,WAASI,QAAT,GAAoB;AAClB,QAAIF,WAAW,GAAG,CAAd,GAAkB,CAAtB,EAAyB;AACvBC,MAAAA,cAAc,CAACD,WAAW,GAAG,CAAf,CAAd;AACD;AACF;;AACD,WAASG,YAAT,GAAwB;AACtB,QAAIH,WAAW,GAAG,CAAd,GAAkB,CAAtB,EAAyB;AACvBC,MAAAA,cAAc,CAACD,WAAW,GAAG,CAAf,CAAd;AACD;AACF;;AAED,sBACE;AAAA,2BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAKD,CArBD;;GAAMD,Y;;KAAAA,Y;AAuBN,eAAeA,YAAf","sourcesContent":["import { useState } from \"react\";\n\nconst LibraryModal = () => {\n  const [currentPage, setCurrentPage] = useState(1);\n  // const [nextPage, setNetPage] = useState(2);\n  // const [previousPage, setPreviousPage] = useState();\n\n  function nextPage() {\n    if (currentPage + 1 < 3) {\n      setCurrentPage(currentPage + 1);\n    }\n  }\n  function previousPage() {\n    if (currentPage - 1 > 0) {\n      setCurrentPage(currentPage - 1);\n    }\n  }\n\n  return (\n    <>\n      <h3> My Wizard</h3>\n    </>\n  );\n};\n\nexport default LibraryModal;\n"]},"metadata":{},"sourceType":"module"}